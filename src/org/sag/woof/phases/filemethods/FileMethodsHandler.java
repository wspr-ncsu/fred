package org.sag.woof.phases.filemethods;

import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;

import org.sag.acminer.database.excludedelements.IExcludedElementsDatabase;
import org.sag.common.io.FileHash;
import org.sag.main.config.PhaseConfig;
import org.sag.main.phase.AbstractPhaseHandler;
import org.sag.main.phase.IPhaseHandler;
import org.sag.woof.IWoofDataAccessor;
import org.sag.woof.database.filemethods.IFileMethodsDatabase;
import org.sag.woof.sootinit.APISootLoader;

public class FileMethodsHandler extends AbstractPhaseHandler {
	
	private Path jimpleJar;
	private Path nativeFileAccessMethodsFile;
	private Path javaAPIFileMethodsFile;
	private Path androidAPIFileMethodsFile;
	private Path javaAPIIndicatorFile;
	private Path debugDir;
	
	public FileMethodsHandler(List<IPhaseHandler> depPhases, PhaseConfig pc) {
		super(depPhases, pc);
	}
	
	@Override
	protected void initInner() {
		this.jimpleJar = dependencyFilePaths.get(0);
		this.javaAPIIndicatorFile = dependencyFilePaths.get(dependencyFilePaths.size()-4);
		this.nativeFileAccessMethodsFile = dependencyFilePaths.get(dependencyFilePaths.size()-3);
		this.javaAPIFileMethodsFile = dependencyFilePaths.get(dependencyFilePaths.size()-2);
		this.androidAPIFileMethodsFile = dependencyFilePaths.get(dependencyFilePaths.size()-1);
		this.debugDir = otherFilePaths.get(0);
	}
	
	@Override
	protected List<FileHash> getOldDependencyFileHashes() throws Exception {
		return ((IWoofDataAccessor)dataAccessor).getFileMethodsDB().getFileHashList();
	}
	
	@Override
	protected void loadExistingInformation() throws Exception {
		((IWoofDataAccessor)dataAccessor).setFileMethodsDB(IFileMethodsDatabase.Factory.readXML(null, getOutputFilePath()));
	}
	
	@Override
	protected boolean isSootInitilized() {
		return APISootLoader.v().isSootLoaded();
	}

	@Override
	protected boolean initilizeSoot() {
		boolean ret = APISootLoader.v().load(((IWoofDataAccessor)dataAccessor), jimpleJar, ai.getJavaVersion(), logger);
		if(ret) {
			//Perform the modification of the call graph here because this call graph is only used for this
			//specific handler
			try{
				FileMethodsCallGraphModifier mod = new FileMethodsCallGraphModifier((IWoofDataAccessor)dataAccessor,logger);
				if(!mod.run()){
					logger.fatal("{}: The CallGraphModifier encountered errors during executation.",cn);
					ret = false;
				}
			}catch(Throwable t){
				logger.fatal("{}: Unexpected exception during the run of the CallGraphModifier.",t,cn);
				ret = false;
			}	
		}
		return ret;
	}
	
	@Override
	protected boolean doWork() {
		try {
			IExcludedElementsDatabase excludeDB = ((IWoofDataAccessor)dataAccessor).getExcludedElementsDB();
			IExcludedElementsDatabase javaAPIIndicatorDB = IExcludedElementsDatabase.Factory.readTXT(javaAPIIndicatorFile);
			
			//Remove the last two dep files to get the dep files that are not generated by this phase and therefore must exist right now
			List<Path> externalDepFiles = new ArrayList<>(dependencyFilePaths);
			externalDepFiles.remove(externalDepFiles.size()-1);
			externalDepFiles.remove(externalDepFiles.size()-1);
			
			DiscoverFileMethods runner = new DiscoverFileMethods(((IWoofDataAccessor)dataAccessor), excludeDB, javaAPIIndicatorDB, externalDepFiles, 
					nativeFileAccessMethodsFile, javaAPIFileMethodsFile, androidAPIFileMethodsFile, rootPath, debugDir, logger);
			if(!runner.run()) {
				logger.fatal("{}: Failed to discover the file methods in the android api.",cn);
				return false;
			}
			
			IFileMethodsDatabase db = ((IWoofDataAccessor)dataAccessor).getFileMethodsDB();
			db.setFileHashList(makeFileHashList());
			db.writeXML(null, getOutputFilePath());
		} catch(Throwable t) {
			logger.fatal("{}: Failed to generate the FileMethodsDatabase.",t,cn);
			return false;
		}
		return true;
	}

}
